{"version":3,"sources":["webpack:///./src/components/input/range.js","webpack:///./src/utils/fractals.js","webpack:///./src/pages/projects/fractal-trees.js"],"names":["RangeInput","label","min","max","step","value","onChange","type","e","parseInt","target","recurrentFractal","ctx","first","startX","startY","len","segments","angle","jitter","branchWidth","beginPath","save","translate","rotate","Math","ceil","random","PI","lineWidth","moveTo","lineTo","stroke","restore","FractalTrees","canvas","useRef","useState","scale","setScale","width","height","length","setLength","setAngle","setSegments","setJitter","redraw","current","getContext","style","clearRect","useLayoutEffect","window","handleResize","outerWidth","addEventListener","removeEventListener","useEffect","className","title","keywords","onClick","ref"],"mappings":"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","file":"component---src-pages-projects-fractal-trees-js-f183968dcd6bd3d18d5f.js","sourcesContent":["import React from \"react\"\nimport \"./style.css\"\n\nconst RangeInput = ({ label, min, max, step, value, onChange }) => {\n  return (\n    <>\n      <label>{label}</label>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        step={step}\n        value={value}\n        onChange={e => onChange(parseInt(e.target.value))}\n      />\n    </>\n  )\n}\n\nexport default RangeInput\n","export const lengthReduction = 0.8\nexport const widthReduction = 0.8\n\nconst recurrentFractal = (\n  ctx,\n  first,\n  startX,\n  startY,\n  len,\n  segments,\n  angle,\n  jitter,\n  branchWidth\n) => {\n  ctx.beginPath()\n  ctx.save()\n\n  ctx.translate(startX, startY)\n  ctx.rotate(\n    first ? 0 : (angle * Math.ceil(Math.random() * jitter) * Math.PI) / 180\n  )\n  ctx.lineWidth = branchWidth\n  ctx.moveTo(0, 0)\n  ctx.lineTo(0, -len)\n  ctx.stroke()\n\n  if (segments === 0) {\n    ctx.restore()\n    return\n  }\n\n  recurrentFractal(\n    ctx,\n    false,\n    0,\n    -len,\n    len * lengthReduction,\n    segments - 1,\n    -angle,\n    jitter,\n    branchWidth * widthReduction\n  )\n  recurrentFractal(\n    ctx,\n    false,\n    0,\n    -len,\n    len * lengthReduction,\n    segments - 1,\n    angle,\n    jitter,\n    branchWidth * widthReduction\n  )\n\n  ctx.restore()\n}\n\nexport default recurrentFractal\n","import React, { useRef, useEffect, useState, useLayoutEffect } from \"react\"\n\nimport Layout from \"../../components/layout\"\nimport RangeInput from \"../../components/input/range\"\nimport SEO from \"../../components/seo\"\n\nimport recurrentFractal from \"../../utils/fractals\"\n\n// base width of tree\nconst baseWidth = 8\n\nconst FractalTrees = () => {\n  const canvas = useRef()\n  const [scale, setScale] = useState(1)\n\n  const [width, height] = [900 * scale, 670 * scale]\n  // initial length\n  const [length, setLength] = useState(120 * scale)\n  // constant angle factor\n  const [angle, setAngle] = useState(5)\n  // number of recurrent steps\n  const [segments, setSegments] = useState(14)\n  // randomness factor\n  const [jitter, setJitter] = useState(10)\n\n  const redraw = () => {\n    const ctx = canvas.current.getContext(\"2d\")\n    canvas.current.style.width = \"100%\"\n    canvas.current.style.height = \"100%\"\n    canvas.current.width = width\n    canvas.current.height = height\n    ctx.clearRect(0, 0, canvas.current.width, canvas.current.height)\n    recurrentFractal(\n      ctx,\n      true,\n      width / 2,\n      height - 70 * scale,\n      length,\n      segments,\n      angle,\n      jitter,\n      baseWidth\n    )\n  }\n\n  // make sure canvas is resized on mobile\n  useLayoutEffect(() => {\n    if (typeof window === \"undefined\") return\n    const handleResize = () => setScale(window.outerWidth > 500 ? 1 : 0.4)\n    window.addEventListener(\"resize\", handleResize)\n    return () => {\n      window.removeEventListener(\"resize\", handleResize)\n    }\n  })\n\n  useEffect(redraw, [length, angle, jitter, segments, scale])\n\n  return (\n    <Layout className=\"noselect\">\n      <SEO\n        title=\"Fractal Trees\"\n        keywords={[\n          `borzeckid`,\n          `freelance`,\n          `fractals`,\n          `procedurally generated`,\n          `react`,\n          `redux`,\n        ]}\n      />\n      <h1>Fractal Trees</h1>\n\n      <canvas onClick={redraw} ref={canvas} />\n      <br />\n\n      <RangeInput\n        label=\"length\"\n        min={40 * scale}\n        max={120 * scale}\n        step={10 * scale}\n        value={length}\n        onChange={setLength}\n      />\n      <RangeInput\n        label=\"segments\"\n        min={1}\n        max={15}\n        step={1}\n        value={segments}\n        onChange={setSegments}\n      />\n      <RangeInput\n        label=\"angle\"\n        min={5}\n        max={50}\n        step={1}\n        value={angle}\n        onChange={setAngle}\n      />\n      <RangeInput\n        label=\"jitter\"\n        min={1}\n        max={10}\n        step={1}\n        value={jitter}\n        onChange={setJitter}\n      />\n    </Layout>\n  )\n}\n\nexport default FractalTrees\n"],"sourceRoot":""}