{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.array.find-index.js","webpack:///./src/components/input/range.js","webpack:///./src/pages/projects/fractal-trees.js"],"names":["$export","$find","KEY","forced","Array","P","F","findIndex","callbackfn","this","arguments","length","undefined","RangeInput","label","min","max","step","value","onChange","type","e","parseInt","target","MediaWrapper","FractalTrees","canvas","useRef","useState","setLength","angle","setAngle","segments","setSegments","jitter","setJitter","redraw","ctx","current","getContext","clearRect","width","height","draw","first","startX","startY","len","branchWidth","beginPath","save","translate","rotate","Math","ceil","random","PI","lineWidth","moveTo","lineTo","stroke","restore","useEffect","className","onClick","ref"],"mappings":"2FAEA,IAAIA,EAAU,EAAQ,QAClBC,EAAQ,EAAQ,OAAR,CAA4B,GACpCC,EAAM,YACNC,GAAS,EAETD,IAAO,IAAIE,MAAM,GAAGF,IAAK,WAAcC,GAAS,KACpDH,EAAQA,EAAQK,EAAIL,EAAQM,EAAIH,EAAQ,QAAS,CAC/CI,UAAW,SAAmBC,GAC5B,OAAOP,EAAMQ,KAAMD,EAAYE,UAAUC,OAAS,EAAID,UAAU,QAAKE,MAGzE,EAAQ,OAAR,CAAiCV,I,kHCMlBW,EAhBI,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,IAAKC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAClD,OACE,8BACE,yBAAQL,GACR,qBACEM,KAAK,QACLL,IAAKA,EACLC,IAAKA,EACLC,KAAMA,EACNC,MAAOA,EACPC,SAAU,SAAAE,GAAC,OAAIF,EAASG,SAASD,EAAEE,OAAOL,aCJ5CM,G,UAAY,yNAoJHC,UA/EM,WACnB,IAAMC,EAASC,mBADU,EAWGC,mBAAS,KAA9BjB,EAXkB,KAWVkB,EAXU,OAYCD,mBAAS,GAA5BE,EAZkB,KAYXC,EAZW,OAaOH,mBAAS,IAAlCI,EAbkB,KAaRC,EAbQ,OAcGL,mBAAS,IAA9BM,EAdkB,KAcVC,EAdU,KAgBnBC,EAAS,WACb,IAAMC,EAAMX,EAAOY,QAAQC,WAAW,MACtCF,EAAIG,UAAU,EAAG,EAAGd,EAAOY,QAAQG,MAAOf,EAAOY,QAAQI,QAxEhD,SAAPC,EACJN,EACAO,EACAC,EACAC,EACAC,EACAf,EACAF,EACAI,EACAc,GAEAX,EAAIY,YACJZ,EAAIa,OAEJb,EAAIc,UAAUN,EAAQC,GACtBT,EAAIe,OACFR,EAAQ,EAAKd,EAAQuB,KAAKC,KAAKD,KAAKE,SAAWrB,GAAUmB,KAAKG,GAAM,KAEtEnB,EAAIoB,UAAYT,EAChBX,EAAIqB,OAAO,EAAG,GACdrB,EAAIsB,OAAO,GAAIZ,GACfV,EAAIuB,SAEa,IAAb5B,GAKJW,EACEN,GACA,EACA,GACCU,EAlDmB,GAmDpBA,EACAf,EAAW,GACVF,EACDI,EArDmB,GAsDnBc,GAEFL,EACEN,GACA,EACA,GACCU,EA7DmB,GA8DpBA,EACAf,EAAW,EACXF,EACAI,EAhEmB,GAiEnBc,GAGFX,EAAIwB,WA3BFxB,EAAIwB,UAiDJlB,CACEN,GACA,EACAI,IACAC,IACA/B,EACAqB,EACAF,EACAI,EAlBc,IAyBlB,OAFA4B,oBAAU1B,EAAQ,CAACzB,EAAQmB,EAAOI,EAAQF,EAzB5B,IA4BZ,YAAC,IAAD,CAAQ+B,UAAU,YAChB,uCAEA,YAACvC,EAAD,KACE,sBAAQwC,QAAS5B,EAAQ6B,IAAKvC,EAAQe,MA7BnB,IA6BiCC,OA7BpB,OA+BlC,uBAEA,YAAC,EAAD,CACE5B,MAAM,SACNC,IAAK,GACLC,IAAK,IACLC,KAAM,GACNC,MAAOP,EACPQ,SAAUU,IAEZ,YAAC,EAAD,CACEf,MAAM,WACNC,IAAK,EACLC,IAAK,GACLC,KAAM,EACNC,MAAOc,EACPb,SAAUc,IAEZ,YAAC,EAAD,CACEnB,MAAM,QACNC,IAAK,EACLC,IAAK,GACLC,KAAM,EACNC,MAAOY,EACPX,SAAUY,IAEZ,YAAC,EAAD,CACEjB,MAAM,SACNC,IAAK,EACLC,IAAK,GACLC,KAAM,EACNC,MAAOgB,EACPf,SAAUgB","file":"component---src-pages-projects-fractal-trees-js-1c393c657637cc57efb0.js","sourcesContent":["'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","import React from \"react\"\nimport \"./style.css\"\n\nconst RangeInput = ({ label, min, max, step, value, onChange }) => {\n  return (\n    <>\n      <label>{label}</label>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        step={step}\n        value={value}\n        onChange={e => onChange(parseInt(e.target.value))}\n      />\n    </>\n  )\n}\n\nexport default RangeInput\n","import React, { useRef, useEffect, useState } from \"react\"\nimport Layout from \"../../components/layout\"\nimport RangeInput from \"../../components/input/range\"\nimport styled from \"@emotion/styled\"\nimport useMedia from \"../../hooks/useMedia\"\n\nconst lengthReduction = 0.8\nconst widthReduction = 0.8\n\nconst MediaWrapper = styled.div`\n  canvas {\n    width: 900px;\n    height: 670px;\n  }\n\n  @media screen and (max-width: 400px) {\n    height: 300px;\n    canvas {\n      -webkit-transform: scale(0.4);\n      -webkit-transform-origin: 0 0;\n    }\n  }\n`\n\nconst draw = (\n  ctx,\n  first,\n  startX,\n  startY,\n  len,\n  segments,\n  angle,\n  jitter,\n  branchWidth\n) => {\n  ctx.beginPath()\n  ctx.save()\n\n  ctx.translate(startX, startY)\n  ctx.rotate(\n    first ? 0 : (angle * Math.ceil(Math.random() * jitter) * Math.PI) / 180\n  )\n  ctx.lineWidth = branchWidth\n  ctx.moveTo(0, 0)\n  ctx.lineTo(0, -len)\n  ctx.stroke()\n\n  if (segments === 0) {\n    ctx.restore()\n    return\n  }\n\n  draw(\n    ctx,\n    false,\n    0,\n    -len,\n    len * lengthReduction,\n    segments - 1,\n    -angle,\n    jitter,\n    branchWidth * widthReduction\n  )\n  draw(\n    ctx,\n    false,\n    0,\n    -len,\n    len * lengthReduction,\n    segments - 1,\n    angle,\n    jitter,\n    branchWidth * widthReduction\n  )\n\n  ctx.restore()\n}\n\nconst FractalTrees = () => {\n  const canvas = useRef()\n  // const scale = useMedia(\n  //   [\"(min-width: 1000px)\", \"(min-width: 300px)\"],\n  //   [1, 0.4],\n  //   1\n  // )\n  const scale = 1\n\n  const baseWidth = 8\n  const [width, height] = [900 * scale, 670]\n  const [length, setLength] = useState(120 * scale)\n  const [angle, setAngle] = useState(5)\n  const [segments, setSegments] = useState(12)\n  const [jitter, setJitter] = useState(10)\n\n  const redraw = () => {\n    const ctx = canvas.current.getContext(\"2d\")\n    ctx.clearRect(0, 0, canvas.current.width, canvas.current.height)\n    draw(\n      ctx,\n      true,\n      width / 2,\n      height - 70 * scale,\n      length,\n      segments,\n      angle,\n      jitter,\n      baseWidth\n    )\n  }\n\n  useEffect(redraw, [length, angle, jitter, segments, scale])\n\n  return (\n    <Layout className=\"noselect\">\n      <h1>Fractal Trees</h1>\n\n      <MediaWrapper>\n        <canvas onClick={redraw} ref={canvas} width={width} height={height} />\n      </MediaWrapper>\n      <br />\n\n      <RangeInput\n        label=\"length\"\n        min={40 * scale}\n        max={120 * scale}\n        step={10 * scale}\n        value={length}\n        onChange={setLength}\n      />\n      <RangeInput\n        label=\"segments\"\n        min={1}\n        max={15}\n        step={1}\n        value={segments}\n        onChange={setSegments}\n      />\n      <RangeInput\n        label=\"angle\"\n        min={5}\n        max={50}\n        step={1}\n        value={angle}\n        onChange={setAngle}\n      />\n      <RangeInput\n        label=\"jitter\"\n        min={1}\n        max={10}\n        step={1}\n        value={jitter}\n        onChange={setJitter}\n      />\n    </Layout>\n  )\n}\n\nexport default FractalTrees\n"],"sourceRoot":""}