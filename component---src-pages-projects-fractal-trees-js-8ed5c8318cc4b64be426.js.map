{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.array.find-index.js","webpack:///./src/components/input/range.js","webpack:///./src/pages/projects/fractal-trees.js"],"names":["$export","$find","KEY","forced","Array","P","F","findIndex","callbackfn","this","arguments","length","undefined","RangeInput","label","min","max","step","value","onChange","type","e","parseInt","target","FractalTrees","canvas","useRef","useState","scale","setScale","width","height","setLength","angle","setAngle","segments","setSegments","jitter","setJitter","redraw","ctx","current","getContext","style","console","log","clearRect","draw","first","startX","startY","len","branchWidth","beginPath","save","translate","rotate","Math","ceil","random","PI","lineWidth","moveTo","lineTo","stroke","restore","useLayoutEffect","window","handleResize","outerWidth","addEventListener","removeEventListener","useEffect","className","onClick","ref"],"mappings":"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","file":"component---src-pages-projects-fractal-trees-js-8ed5c8318cc4b64be426.js","sourcesContent":["'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","import React from \"react\"\nimport \"./style.css\"\n\nconst RangeInput = ({ label, min, max, step, value, onChange }) => {\n  return (\n    <>\n      <label>{label}</label>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        step={step}\n        value={value}\n        onChange={e => onChange(parseInt(e.target.value))}\n      />\n    </>\n  )\n}\n\nexport default RangeInput\n","import React, { useRef, useEffect, useState, useLayoutEffect } from \"react\"\nimport Layout from \"../../components/layout\"\nimport RangeInput from \"../../components/input/range\"\nimport useMedia from \"../../hooks/useMedia\"\n\nconst lengthReduction = 0.8\nconst widthReduction = 0.8\n\nconst draw = (\n  ctx,\n  first,\n  startX,\n  startY,\n  len,\n  segments,\n  angle,\n  jitter,\n  branchWidth\n) => {\n  ctx.beginPath()\n  ctx.save()\n\n  ctx.translate(startX, startY)\n  ctx.rotate(\n    first ? 0 : (angle * Math.ceil(Math.random() * jitter) * Math.PI) / 180\n  )\n  ctx.lineWidth = branchWidth\n  ctx.moveTo(0, 0)\n  ctx.lineTo(0, -len)\n  ctx.stroke()\n\n  if (segments === 0) {\n    ctx.restore()\n    return\n  }\n\n  draw(\n    ctx,\n    false,\n    0,\n    -len,\n    len * lengthReduction,\n    segments - 1,\n    -angle,\n    jitter,\n    branchWidth * widthReduction\n  )\n  draw(\n    ctx,\n    false,\n    0,\n    -len,\n    len * lengthReduction,\n    segments - 1,\n    angle,\n    jitter,\n    branchWidth * widthReduction\n  )\n\n  ctx.restore()\n}\n\nconst FractalTrees = () => {\n  const canvas = useRef()\n  const [scale, setScale] = useState(1)\n\n  const baseWidth = 8\n  const [width, height] = [900 * scale, 670 * scale]\n  const [length, setLength] = useState(120 * scale)\n  const [angle, setAngle] = useState(5)\n  const [segments, setSegments] = useState(12)\n  const [jitter, setJitter] = useState(10)\n\n  const redraw = () => {\n    const ctx = canvas.current.getContext(\"2d\")\n    canvas.current.style.width = \"100%\"\n    canvas.current.style.height = \"100%\"\n    console.log(width, height, scale)\n    canvas.current.width = width\n    canvas.current.height = height\n    ctx.clearRect(0, 0, canvas.current.width, canvas.current.height)\n    draw(\n      ctx,\n      true,\n      width / 2,\n      height - 70 * scale,\n      length,\n      segments,\n      angle,\n      jitter,\n      baseWidth\n    )\n  }\n\n  useLayoutEffect(() => {\n    if (typeof window === \"undefined\") return\n    const handleResize = () => setScale(window.outerWidth > 500 ? 1 : 0.4)\n    window.addEventListener(\"resize\", handleResize)\n    return () => {\n      window.removeEventListener(\"resize\", handleResize)\n    }\n  })\n\n  useEffect(redraw, [length, angle, jitter, segments, scale])\n\n  return (\n    <Layout className=\"noselect\">\n      <h1>Fractal Trees</h1>\n\n      <canvas onClick={redraw} ref={canvas} />\n      <br />\n\n      <RangeInput\n        label=\"length\"\n        min={40 * scale}\n        max={120 * scale}\n        step={10 * scale}\n        value={length}\n        onChange={setLength}\n      />\n      <RangeInput\n        label=\"segments\"\n        min={1}\n        max={15}\n        step={1}\n        value={segments}\n        onChange={setSegments}\n      />\n      <RangeInput\n        label=\"angle\"\n        min={5}\n        max={50}\n        step={1}\n        value={angle}\n        onChange={setAngle}\n      />\n      <RangeInput\n        label=\"jitter\"\n        min={1}\n        max={10}\n        step={1}\n        value={jitter}\n        onChange={setJitter}\n      />\n    </Layout>\n  )\n}\n\nexport default FractalTrees\n"],"sourceRoot":""}