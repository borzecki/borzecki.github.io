{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.array.find-index.js","webpack:///./src/components/input/range.js","webpack:///./src/hooks/useMedia.js","webpack:///./src/pages/projects/fractal-trees.js"],"names":["$export","$find","KEY","forced","Array","P","F","findIndex","callbackfn","this","arguments","length","undefined","RangeInput","label","min","max","step","value","onChange","type","e","parseInt","target","useMedia","queries","values","defaultValue","getLists","window","map","q","matchMedia","getValue","index","mql","matches","useState","setValue","useEffect","handler","forEach","addListener","removeListener","FractalTrees","canvas","useRef","scale","baseWidth","width","height","setLength","angle","setAngle","segments","setSegments","jitter","setJitter","redraw","ctx","current","getContext","clearRect","draw","first","startX","startY","len","branchWidth","beginPath","save","translate","rotate","Math","ceil","random","PI","lineWidth","moveTo","lineTo","stroke","restore","className","onClick","ref"],"mappings":"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","file":"component---src-pages-projects-fractal-trees-js-96a07fe0e0d08059218b.js","sourcesContent":["'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","import React from \"react\"\nimport \"./style.css\"\n\nconst RangeInput = ({ label, min, max, step, value, onChange }) => {\n  return (\n    <>\n      <label>{label}</label>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        step={step}\n        value={value}\n        onChange={e => onChange(parseInt(e.target.value))}\n      />\n    </>\n  )\n}\n\nexport default RangeInput\n","import { useState, useEffect } from \"react\"\n\nconst useMedia = (queries, values, defaultValue) => {\n  const getLists = () =>\n    typeof window !== \"undefined\" ? queries.map(q => window.matchMedia(q)) : []\n\n  // Function that gets value based on matching media query\n  const getValue = () => {\n    // Get index of first media query that matches\n    const index = getLists().findIndex(mql => mql.matches)\n    // Return related value or defaultValue if none\n    return typeof values[index] !== \"undefined\" ? values[index] : defaultValue\n  }\n\n  const [value, setValue] = useState(getValue)\n\n  useEffect(() => {\n    const handler = () => setValue(getValue)\n    getLists().forEach(mql => mql.addListener(handler))\n    return () => getLists().forEach(mql => mql.removeListener(handler))\n  }, [window])\n\n  return value\n}\nexport default useMedia\n","import React, { useRef, useEffect, useState } from \"react\"\nimport Layout from \"../../components/layout\"\nimport RangeInput from \"../../components/input/range\"\nimport useMedia from \"../../hooks/useMedia\"\n\nconst lengthReduction = 0.8\nconst widthReduction = 0.8\n\nconst draw = (\n  ctx,\n  first,\n  startX,\n  startY,\n  len,\n  segments,\n  angle,\n  jitter,\n  branchWidth\n) => {\n  ctx.beginPath()\n  ctx.save()\n\n  ctx.translate(startX, startY)\n  ctx.rotate(\n    first ? 0 : (angle * Math.ceil(Math.random() * jitter) * Math.PI) / 180\n  )\n  ctx.lineWidth = branchWidth\n  ctx.moveTo(0, 0)\n  ctx.lineTo(0, -len)\n  ctx.stroke()\n\n  if (segments === 0) {\n    ctx.restore()\n    return\n  }\n\n  draw(\n    ctx,\n    false,\n    0,\n    -len,\n    len * lengthReduction,\n    segments - 1,\n    -angle,\n    jitter,\n    branchWidth * widthReduction\n  )\n  draw(\n    ctx,\n    false,\n    0,\n    -len,\n    len * lengthReduction,\n    segments - 1,\n    angle,\n    jitter,\n    branchWidth * widthReduction\n  )\n\n  ctx.restore()\n}\n\nconst FractalTrees = () => {\n  const canvas = useRef()\n  const scale = useMedia(\n    [\"(min-width: 1000px)\", \"(min-width: 300px)\"],\n    [1, 0.4],\n    1\n  )\n\n  const baseWidth = 8 * scale\n  const [width, height] = [900 * scale, 670 * scale]\n  const [length, setLength] = useState(120 * scale)\n  const [angle, setAngle] = useState(5)\n  const [segments, setSegments] = useState(12)\n  const [jitter, setJitter] = useState(10)\n\n  const redraw = () => {\n    const ctx = canvas.current.getContext(\"2d\")\n    ctx.clearRect(0, 0, canvas.current.width, canvas.current.height)\n    draw(\n      ctx,\n      true,\n      width / 2,\n      height - 70 * scale,\n      length,\n      segments,\n      angle,\n      jitter,\n      baseWidth\n    )\n  }\n\n  useEffect(redraw, [length, angle, jitter, segments, scale])\n\n  return (\n    <Layout className=\"noselect\">\n      <h1>Fractal Trees</h1>\n\n      <canvas onClick={redraw} ref={canvas} width={width} height={height} />\n      <br />\n\n      <RangeInput\n        label=\"length\"\n        min={40 * scale}\n        max={120 * scale}\n        step={10 * scale}\n        value={length}\n        onChange={setLength}\n      />\n      <RangeInput\n        label=\"segments\"\n        min={1}\n        max={15}\n        step={1}\n        value={segments}\n        onChange={setSegments}\n      />\n      <RangeInput\n        label=\"angle\"\n        min={5}\n        max={50}\n        step={1}\n        value={angle}\n        onChange={setAngle}\n      />\n      <RangeInput\n        label=\"jitter\"\n        min={1}\n        max={10}\n        step={1}\n        value={jitter}\n        onChange={setJitter}\n      />\n    </Layout>\n  )\n}\n\nexport default FractalTrees\n"],"sourceRoot":""}