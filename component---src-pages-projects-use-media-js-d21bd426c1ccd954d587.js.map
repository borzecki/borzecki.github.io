{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.array.find-index.js","webpack:///./src/pages/projects/useMedia.js"],"names":["$export","$find","KEY","forced","Array","P","F","findIndex","callbackfn","this","arguments","length","undefined","useMedia","queries","values","defaultValue","mediaQueryLists","window","map","q","matchMedia","getValue","index","mql","matches","useState","value","setValue","useEffect","handler","forEach","addListener","removeListener"],"mappings":"2FAEA,IAAIA,EAAU,EAAQ,QAClBC,EAAQ,EAAQ,OAAR,CAA4B,GACpCC,EAAM,YACNC,GAAS,EAETD,IAAO,IAAIE,MAAM,GAAGF,IAAK,WAAcC,GAAS,KACpDH,EAAQA,EAAQK,EAAIL,EAAQM,EAAIH,EAAQ,QAAS,CAC/CI,UAAW,SAAmBC,GAC5B,OAAOP,EAAMQ,KAAMD,EAAYE,UAAUC,OAAS,EAAID,UAAU,QAAKE,MAGzE,EAAQ,OAAR,CAAiCV,I,mECqBlBW,UAhCE,SAACC,EAASC,EAAQC,GAEjC,IAAMC,EACc,oBAAXC,OAAyBJ,EAAQK,KAAI,SAAAC,GAAC,OAAIF,OAAOG,WAAWD,MAAM,GAGrEE,EAAW,WAEf,IAAMC,EAAQN,EAAgBV,WAAU,SAAAiB,GAAG,OAAIA,EAAIC,WAEnD,YAAgC,IAAlBV,EAAOQ,GAAyBR,EAAOQ,GAASP,GAVd,EAcxBU,mBAASJ,GAA5BK,EAd2C,KAcpCC,EAdoC,KA8BlD,OAdAC,qBACE,WAIE,IAAMC,EAAU,kBAAMF,EAASN,IAI/B,OAFAL,EAAgBc,SAAQ,SAAAP,GAAG,OAAIA,EAAIQ,YAAYF,MAExC,kBAAMb,EAAgBc,SAAQ,SAAAP,GAAG,OAAIA,EAAIS,eAAeH,SAEjE,IAGKH","file":"component---src-pages-projects-use-media-js-d21bd426c1ccd954d587.js","sourcesContent":["'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","import { useState, useEffect } from \"react\"\n\nconst useMedia = (queries, values, defaultValue) => {\n  // Array containing a media query list for each query\n  const mediaQueryLists =\n    typeof window !== \"undefined\" ? queries.map(q => window.matchMedia(q)) : []\n\n  // Function that gets value based on matching media query\n  const getValue = () => {\n    // Get index of first media query that matches\n    const index = mediaQueryLists.findIndex(mql => mql.matches)\n    // Return related value or defaultValue if none\n    return typeof values[index] !== \"undefined\" ? values[index] : defaultValue\n  }\n\n  // State and setter for matched value\n  const [value, setValue] = useState(getValue)\n\n  useEffect(\n    () => {\n      // Event listener callback\n      // Note: By defining getValue outside of useEffect we ensure that it has ...\n      // ... current values of hook args (as this hook callback is created once on mount).\n      const handler = () => setValue(getValue)\n      // Set a listener for each media query with above handler as callback.\n      mediaQueryLists.forEach(mql => mql.addListener(handler))\n      // Remove listeners on cleanup\n      return () => mediaQueryLists.forEach(mql => mql.removeListener(handler))\n    },\n    [] // Empty array ensures effect is only run on mount and unmount\n  )\n\n  return value\n}\nexport default useMedia\n"],"sourceRoot":""}