{"version":3,"sources":["webpack:///./src/components/input/range.js","webpack:///./src/utils/fractals.js","webpack:///./src/pages/projects/fractal-trees.js"],"names":["RangeInput","label","min","max","step","value","onChange","type","e","parseInt","target","drawFractal","ctx","first","startX","startY","len","segments","angle","jitter","branchWidth","beginPath","save","translate","rotate","Math","ceil","random","PI","lineWidth","moveTo","lineTo","stroke","restore","FractalTrees","canvas","useRef","useState","length","setLength","setAngle","setSegments","setJitter","redraw","current","getContext","style","width","height","clearRect","useEffect","className","title","keywords","onClick","ref"],"mappings":"+JAmBeA,EAhBI,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,IAAKC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAClD,OACE,8BACE,yBAAQL,GACR,qBACEM,KAAK,QACLL,IAAKA,EACLC,IAAKA,EACLC,KAAMA,EACNC,MAAOA,EACPC,SAAU,SAAAE,GAAC,OAAIF,EAASG,SAASD,EAAEE,OAAOL,a,YC4CnCM,EAtDK,SAAdA,EACJC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEAR,EAAIS,YACJT,EAAIU,OAEJV,EAAIW,UAAUT,EAAQC,GACtBH,EAAIY,OACFX,EAAQ,EAAKK,EAAQO,KAAKC,KAAKD,KAAKE,SAAWR,GAAUM,KAAKG,GAAM,KAEtEhB,EAAIiB,UAAYT,EAChBR,EAAIkB,OAAO,EAAG,GACdlB,EAAImB,OAAO,GAAIf,GACfJ,EAAIoB,SAEa,IAAbf,GAKJN,EACEC,GACA,EACA,GACCI,EAnC0B,GAoC3BA,EACAC,EAAW,GACVC,EACDC,EAtC0B,GAuC1BC,GAEFT,EACEC,GACA,EACA,GACCI,EA9C0B,GA+C3BA,EACAC,EAAW,EACXC,EACAC,EAjD0B,GAkD1BC,GAGFR,EAAIqB,WA3BFrB,EAAIqB,WCuEOC,UAvFM,WACnB,IAAMC,EAASC,mBADU,EAKGC,mBAAS,KAA9BC,EALkB,KAKVC,EALU,OAOCF,mBAAS,GAA5BnB,EAPkB,KAOXsB,EAPW,OASOH,mBAAS,IAAlCpB,EATkB,KASRwB,EATQ,OAWGJ,mBAAS,IAA9BlB,EAXkB,KAWVuB,EAXU,KAanBC,EAAS,WACb,IAAM/B,EAAMuB,EAAOS,QAAQC,WAAW,MACtCV,EAAOS,QAAQE,MAAMC,MAAQ,OAC7BZ,EAAOS,QAAQE,MAAME,OAAS,OAC9BpC,EAAIqC,UAAU,EAAG,EAAGd,EAAOS,QAAQG,MAAOZ,EAAOS,QAAQI,QACzDrC,EACEC,GACA,EACAmC,IACAC,IACAV,EACArB,EACAC,EACAC,EA5BY,IAmChB,OAFA+B,oBAAUP,EAAQ,CAACL,EAAQpB,EAAOC,EAAQF,IAGxC,YAAC,IAAD,CAAQkC,UAAU,YAChB,YAAC,IAAD,CACEC,MAAM,gBACNC,SAAU,CAAC,YAAD,mEASZ,uCAEA,sBAAQC,QAASX,EAAQY,IAAKpB,EAAQY,MA7CjB,IA6C+BC,OA7C1B,MA8C1B,uBAEA,YAAC,EAAD,CACE/C,MAAM,SACNC,IAAK,GACLC,IAAK,IACLC,KAAM,GACNC,MAAOiC,EACPhC,SAAUiC,IAEZ,YAAC,EAAD,CACEtC,MAAM,WACNC,IAAK,EACLC,IAAK,GACLC,KAAM,EACNC,MAAOY,EACPX,SAAUmC,IAEZ,YAAC,EAAD,CACExC,MAAM,QACNC,IAAK,EACLC,IAAK,GACLC,KAAM,EACNC,MAAOa,EACPZ,SAAUkC,IAEZ,YAAC,EAAD,CACEvC,MAAM,SACNC,IAAK,EACLC,IAAK,GACLC,KAAM,EACNC,MAAOc,EACPb,SAAUoC","file":"component---src-pages-projects-fractal-trees-js-a29484f8838c56906ce0.js","sourcesContent":["import React from \"react\"\nimport \"./style.css\"\n\nconst RangeInput = ({ label, min, max, step, value, onChange }) => {\n  return (\n    <>\n      <label>{label}</label>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        step={step}\n        value={value}\n        onChange={e => onChange(parseInt(e.target.value))}\n      />\n    </>\n  )\n}\n\nexport default RangeInput\n","export const lengthReduction = 0.8\nexport const widthReduction = 0.8\n\nconst drawFractal = (\n  ctx,\n  first,\n  startX,\n  startY,\n  len,\n  segments,\n  angle,\n  jitter,\n  branchWidth\n) => {\n  ctx.beginPath()\n  ctx.save()\n\n  ctx.translate(startX, startY)\n  ctx.rotate(\n    first ? 0 : (angle * Math.ceil(Math.random() * jitter) * Math.PI) / 180\n  )\n  ctx.lineWidth = branchWidth\n  ctx.moveTo(0, 0)\n  ctx.lineTo(0, -len)\n  ctx.stroke()\n\n  if (segments === 0) {\n    ctx.restore()\n    return\n  }\n\n  drawFractal(\n    ctx,\n    false,\n    0,\n    -len,\n    len * lengthReduction,\n    segments - 1,\n    -angle,\n    jitter,\n    branchWidth * widthReduction\n  )\n  drawFractal(\n    ctx,\n    false,\n    0,\n    -len,\n    len * lengthReduction,\n    segments - 1,\n    angle,\n    jitter,\n    branchWidth * widthReduction\n  )\n\n  ctx.restore()\n}\n\nexport default drawFractal\n","import React, { useRef, useEffect, useState } from \"react\"\n\nimport Layout from \"../../components/layout\"\nimport RangeInput from \"../../components/input/range\"\nimport SEO from \"../../components/seo\"\n\nimport drawFractal from \"../../utils/fractals\"\n\n// base width of tree\nconst baseWidth = 8\n\nconst FractalTrees = () => {\n  const canvas = useRef()\n\n  const [width, height] = [900, 670]\n  // initial length\n  const [length, setLength] = useState(120)\n  // constant angle factor\n  const [angle, setAngle] = useState(5)\n  // number of recurrent steps\n  const [segments, setSegments] = useState(14)\n  // randomness factor\n  const [jitter, setJitter] = useState(10)\n\n  const redraw = () => {\n    const ctx = canvas.current.getContext(\"2d\")\n    canvas.current.style.width = \"100%\"\n    canvas.current.style.height = \"100%\"\n    ctx.clearRect(0, 0, canvas.current.width, canvas.current.height)\n    drawFractal(\n      ctx,\n      true,\n      width / 2,\n      height - 70,\n      length,\n      segments,\n      angle,\n      jitter,\n      baseWidth\n    )\n  }\n\n  useEffect(redraw, [length, angle, jitter, segments])\n\n  return (\n    <Layout className=\"noselect\">\n      <SEO\n        title=\"Fractal Trees\"\n        keywords={[\n          `borzeckid`,\n          `freelance`,\n          `fractals`,\n          `procedurally generated`,\n          `react`,\n          `redux`,\n        ]}\n      />\n      <h1>Fractal Trees</h1>\n\n      <canvas onClick={redraw} ref={canvas} width={width} height={height} />\n      <br />\n\n      <RangeInput\n        label=\"length\"\n        min={40}\n        max={120}\n        step={10}\n        value={length}\n        onChange={setLength}\n      />\n      <RangeInput\n        label=\"segments\"\n        min={1}\n        max={15}\n        step={1}\n        value={segments}\n        onChange={setSegments}\n      />\n      <RangeInput\n        label=\"angle\"\n        min={5}\n        max={50}\n        step={1}\n        value={angle}\n        onChange={setAngle}\n      />\n      <RangeInput\n        label=\"jitter\"\n        min={1}\n        max={10}\n        step={1}\n        value={jitter}\n        onChange={setJitter}\n      />\n    </Layout>\n  )\n}\n\nexport default FractalTrees\n"],"sourceRoot":""}